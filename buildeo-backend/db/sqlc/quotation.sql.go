// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: quotation.sql

package db

import (
	"context"
	"database/sql"
)

const createQuotation = `-- name: CreateQuotation :execresult
INSERT INTO quotations (
  category_id, name, email, phone, address, document_url, status, admin_id, admin_notes, created_by, updated_by
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateQuotationParams struct {
	CategoryID  int64          `json:"category_id"`
	Name        string         `json:"name"`
	Email       string         `json:"email"`
	Phone       string         `json:"phone"`
	Address     string         `json:"address"`
	DocumentUrl string         `json:"document_url"`
	Status      string         `json:"status"`
	AdminID     sql.NullInt64  `json:"admin_id"`
	AdminNotes  sql.NullString `json:"admin_notes"`
	CreatedBy   int64          `json:"created_by"`
	UpdatedBy   int64          `json:"updated_by"`
}

func (q *Queries) CreateQuotation(ctx context.Context, arg CreateQuotationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createQuotation,
		arg.CategoryID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.DocumentUrl,
		arg.Status,
		arg.AdminID,
		arg.AdminNotes,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
}

const deleteQuotation = `-- name: DeleteQuotation :exec
DELETE FROM quotations WHERE id = ?
`

func (q *Queries) DeleteQuotation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQuotation, id)
	return err
}

const getQuotation = `-- name: GetQuotation :one
SELECT id, category_id, name, email, phone, address, document_url, status, admin_id, admin_notes, created_at, created_by, updated_at, updated_by
FROM quotations
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetQuotation(ctx context.Context, id int64) (Quotation, error) {
	row := q.db.QueryRowContext(ctx, getQuotation, id)
	var i Quotation
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.DocumentUrl,
		&i.Status,
		&i.AdminID,
		&i.AdminNotes,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listQuotations = `-- name: ListQuotations :many
SELECT id, category_id, name, email, phone, address, document_url, status, admin_id, admin_notes, created_at, created_by, updated_at, updated_by
FROM quotations
WHERE admin_id = ?
ORDER BY id
`

func (q *Queries) ListQuotations(ctx context.Context, adminID sql.NullInt64) ([]Quotation, error) {
	rows, err := q.db.QueryContext(ctx, listQuotations, adminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quotation{}
	for rows.Next() {
		var i Quotation
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.DocumentUrl,
			&i.Status,
			&i.AdminID,
			&i.AdminNotes,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuotation = `-- name: UpdateQuotation :execresult
UPDATE quotations
SET category_id = ?, name = ?, email = ?, phone = ?, address = ?, document_url = ?, status = ?, admin_id = ?, admin_notes = ?, updated_by = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateQuotationParams struct {
	CategoryID  int64          `json:"category_id"`
	Name        string         `json:"name"`
	Email       string         `json:"email"`
	Phone       string         `json:"phone"`
	Address     string         `json:"address"`
	DocumentUrl string         `json:"document_url"`
	Status      string         `json:"status"`
	AdminID     sql.NullInt64  `json:"admin_id"`
	AdminNotes  sql.NullString `json:"admin_notes"`
	UpdatedBy   int64          `json:"updated_by"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateQuotation(ctx context.Context, arg UpdateQuotationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateQuotation,
		arg.CategoryID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.DocumentUrl,
		arg.Status,
		arg.AdminID,
		arg.AdminNotes,
		arg.UpdatedBy,
		arg.ID,
	)
}
