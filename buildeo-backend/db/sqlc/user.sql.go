// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  email, password, firstname, lastname, post_number, street, phone, role, created_by, updated_by
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	Firstname  string `json:"firstname"`
	Lastname   string `json:"lastname"`
	PostNumber string `json:"post_number"`
	Street     string `json:"street"`
	Phone      string `json:"phone"`
	Role       string `json:"role"`
	CreatedBy  int64  `json:"created_by"`
	UpdatedBy  int64  `json:"updated_by"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Firstname,
		arg.Lastname,
		arg.PostNumber,
		arg.Street,
		arg.Phone,
		arg.Role,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, firstname, lastname, post_number, street, phone, role, created_at, created_by, updated_at, updated_by 
FROM users
WHERE email = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.PostNumber,
		&i.Street,
		&i.Phone,
		&i.Role,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, firstname, lastname, post_number, street, phone, role, created_at, created_by, updated_at, updated_by 
FROM users
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.PostNumber,
		&i.Street,
		&i.Phone,
		&i.Role,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, firstname, lastname, post_number, street, phone, role, created_at, created_by, updated_at, updated_by 
FROM users
ORDER BY id 
LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Firstname,
			&i.Lastname,
			&i.PostNumber,
			&i.Street,
			&i.Phone,
			&i.Role,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users
SET email = ?, password = ?, firstname = ?, lastname = ?, phone = ?, post_number = ?, street = ?, role = ?, updated_by = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserParams struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	Firstname  string `json:"firstname"`
	Lastname   string `json:"lastname"`
	Phone      string `json:"phone"`
	PostNumber string `json:"post_number"`
	Street     string `json:"street"`
	Role       string `json:"role"`
	UpdatedBy  int64  `json:"updated_by"`
	ID         int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Password,
		arg.Firstname,
		arg.Lastname,
		arg.Phone,
		arg.PostNumber,
		arg.Street,
		arg.Role,
		arg.UpdatedBy,
		arg.ID,
	)
}
