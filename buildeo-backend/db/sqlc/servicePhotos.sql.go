// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: servicePhotos.sql

package db

import (
	"context"
	"database/sql"
)

const createServicePhoto = `-- name: CreateServicePhoto :execresult
INSERT INTO service_photos (
  service_id, photo_url, created_by, updated_by
) VALUES (
  ?, ?, ?, ?
)
`

type CreateServicePhotoParams struct {
	ServiceID int64  `json:"service_id"`
	PhotoUrl  string `json:"photo_url"`
	CreatedBy int64  `json:"created_by"`
	UpdatedBy int64  `json:"updated_by"`
}

func (q *Queries) CreateServicePhoto(ctx context.Context, arg CreateServicePhotoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createServicePhoto,
		arg.ServiceID,
		arg.PhotoUrl,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
}

const deleteServicePhoto = `-- name: DeleteServicePhoto :exec
DELETE FROM service_photos WHERE service_id = ?
`

func (q *Queries) DeleteServicePhoto(ctx context.Context, serviceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteServicePhoto, serviceID)
	return err
}

const getServicePhotoByID = `-- name: GetServicePhotoByID :one
SELECT id, service_id, photo_url, created_at, created_by, updated_at, updated_by
FROM service_photos
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetServicePhotoByID(ctx context.Context, id int64) (ServicePhoto, error) {
	row := q.db.QueryRowContext(ctx, getServicePhotoByID, id)
	var i ServicePhoto
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.PhotoUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getServicePhotosByServiceID = `-- name: GetServicePhotosByServiceID :one
SELECT id, service_id, photo_url, created_at, created_by, updated_at, updated_by
FROM service_photos
WHERE service_id = ?
LIMIT 1
`

func (q *Queries) GetServicePhotosByServiceID(ctx context.Context, serviceID int64) (ServicePhoto, error) {
	row := q.db.QueryRowContext(ctx, getServicePhotosByServiceID, serviceID)
	var i ServicePhoto
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.PhotoUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listServicePhotos = `-- name: ListServicePhotos :many
SELECT id, service_id, photo_url, created_at, created_by, updated_at, updated_by
FROM service_photos 
ORDER BY updated_at DESC
`

func (q *Queries) ListServicePhotos(ctx context.Context) ([]ServicePhoto, error) {
	rows, err := q.db.QueryContext(ctx, listServicePhotos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServicePhoto{}
	for rows.Next() {
		var i ServicePhoto
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.PhotoUrl,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServicePhoto = `-- name: UpdateServicePhoto :execresult
UPDATE service_photos
SET photo_url = ?, updated_by = ?, updated_at = CURRENT_TIMESTAMP
WHERE service_id = ?
`

type UpdateServicePhotoParams struct {
	PhotoUrl  string `json:"photo_url"`
	UpdatedBy int64  `json:"updated_by"`
	ServiceID int64  `json:"service_id"`
}

func (q *Queries) UpdateServicePhoto(ctx context.Context, arg UpdateServicePhotoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateServicePhoto, arg.PhotoUrl, arg.UpdatedBy, arg.ServiceID)
}
