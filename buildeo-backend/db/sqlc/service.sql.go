// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: service.sql

package db

import (
	"context"
	"database/sql"
)

const createService = `-- name: CreateService :execresult
INSERT INTO services (
  seller_id, category_id, title, description, price, created_by, updated_by
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
`

type CreateServiceParams struct {
	SellerID    int64          `json:"seller_id"`
	CategoryID  int64          `json:"category_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Price       int64          `json:"price"`
	CreatedBy   int64          `json:"created_by"`
	UpdatedBy   int64          `json:"updated_by"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createService,
		arg.SellerID,
		arg.CategoryID,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services WHERE id = ?
`

func (q *Queries) DeleteService(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteService, id)
	return err
}

const getServiceByID = `-- name: GetServiceByID :one
SELECT id, seller_id, category_id, title, description, price, created_at, created_by, updated_at, updated_by 
FROM services
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetServiceByID(ctx context.Context, id int64) (Service, error) {
	row := q.db.QueryRowContext(ctx, getServiceByID, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.SellerID,
		&i.CategoryID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getServiceBySeller = `-- name: GetServiceBySeller :many
SELECT id, seller_id, category_id, title, description, price, created_at, created_by, updated_at, updated_by 
FROM services
WHERE seller_id = ?
`

func (q *Queries) GetServiceBySeller(ctx context.Context, sellerID int64) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, getServiceBySeller, sellerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.SellerID,
			&i.CategoryID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listService = `-- name: ListService :many
SELECT id, seller_id, category_id, title, description, price, created_at, created_by, updated_at, updated_by 
FROM services
ORDER BY id
LIMIT ? OFFSET ?
`

type ListServiceParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListService(ctx context.Context, arg ListServiceParams) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listService, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.SellerID,
			&i.CategoryID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateService = `-- name: UpdateService :execresult
UPDATE services
SET seller_id = ?, category_id = ?, title = ?, description = ?, price = ?, updated_by = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateServiceParams struct {
	SellerID    int64          `json:"seller_id"`
	CategoryID  int64          `json:"category_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Price       int64          `json:"price"`
	UpdatedBy   int64          `json:"updated_by"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateService,
		arg.SellerID,
		arg.CategoryID,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.UpdatedBy,
		arg.ID,
	)
}
